#!/bin/bash

# Script de r√©solution des probl√®mes d'import n8n
# Sp√©cialement con√ßu pour le workflow Ultravox

echo "üîß R√©solution des probl√®mes d'import n8n Ultravox"
echo "=================================================="

# V√©rifier la version de n8n
check_n8n_version() {
    echo "üìã V√©rification de la version n8n..."
    
    if docker ps | grep -q "n8n"; then
        VERSION=$(docker exec $(docker ps | grep n8n | awk '{print $1}') n8n --version 2>/dev/null || echo "unknown")
        echo "Version n8n d√©tect√©e: $VERSION"
        
        # V√©rifier si la version est compatible
        if [[ "$VERSION" == "unknown" ]]; then
            echo "‚ö†Ô∏è Impossible de d√©tecter la version n8n"
            return 1
        fi
    else
        echo "‚ùå Conteneur n8n non trouv√©"
        return 1
    fi
    
    return 0
}

# Cr√©er un workflow minimal de test
create_test_workflow() {
    echo "üß™ Cr√©ation d'un workflow de test minimal..."
    
    cat > test-minimal.json << 'EOF'
{
  "meta": {
    "instanceId": "test-minimal"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "test"
      },
      "id": "webhook-test",
      "name": "Test Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"status\": \"ok\", \"message\": \"Test r√©ussi\"}"
      },
      "id": "response-test", 
      "name": "Test Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [500, 300]
    }
  ],
  "connections": {
    "Test Webhook": {
      "main": [
        [
          {
            "node": "Test Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "triggerCount": 1
}
EOF

    echo "‚úÖ Workflow de test cr√©√©: test-minimal.json"
}

# Nettoyer les fichiers JSON probl√©matiques
clean_json_files() {
    echo "üßπ Nettoyage des fichiers JSON..."
    
    # Supprimer les caract√®res probl√©matiques
    if [ -f "workflow-ultravox-n8n.json" ]; then
        # Cr√©er une sauvegarde
        cp workflow-ultravox-n8n.json workflow-ultravox-n8n.json.backup
        
        # Nettoyer le fichier
        sed -i 's/\r//g' workflow-ultravox-n8n.json  # Supprimer les retours chariot Windows
        sed -i 's/\t/  /g' workflow-ultravox-n8n.json  # Remplacer tabs par espaces
        
        echo "‚úÖ Fichier original nettoy√©"
    fi
}

# Valider la structure JSON
validate_json() {
    echo "‚úÖ Validation des fichiers JSON..."
    
    for file in workflow-ultravox-*.json test-minimal.json; do
        if [ -f "$file" ]; then
            if python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo "‚úÖ $file: JSON valide"
            else
                echo "‚ùå $file: JSON invalide"
                # Essayer de corriger automatiquement
                echo "üîß Tentative de correction automatique..."
                
                # Corriger les virgules en trop
                sed -i 's/,\s*}/}/g' "$file"
                sed -i 's/,\s*]/]/g' "$file"
                
                if python3 -m json.tool "$file" > /dev/null 2>&1; then
                    echo "‚úÖ $file: Corrig√© avec succ√®s"
                else
                    echo "‚ùå $file: Correction √©chou√©e"
                fi
            fi
        fi
    done
}

# Tester l'import via API n8n
test_import_api() {
    echo "üîå Test d'import via API n8n..."
    
    # Attendre que n8n soit pr√™t
    echo "‚è≥ Attente de n8n..."
    sleep 5
    
    # Tester avec le workflow minimal
    if [ -f "test-minimal.json" ]; then
        RESPONSE=$(curl -s -X POST \
            http://localhost:5678/rest/workflows \
            -H "Content-Type: application/json" \
            -d @test-minimal.json 2>/dev/null)
        
        if echo "$RESPONSE" | grep -q '"id"'; then
            echo "‚úÖ Import API r√©ussi avec workflow minimal"
            return 0
        else
            echo "‚ùå Import API √©chou√©"
            echo "R√©ponse: $RESPONSE"
            return 1
        fi
    fi
    
    return 1
}

# Cr√©er les credentials requis
create_credentials() {
    echo "üîë Cr√©ation des credentials de base..."
    
    # Credential Ultravox (Header Auth)
    cat > credential-ultravox.json << 'EOF'
{
  "name": "Ultravox API",
  "type": "httpHeaderAuth",
  "data": {
    "name": "X-API-Key",
    "value": "your-api-key-here"
  }
}
EOF

    # Credential PostgreSQL
    cat > credential-postgres.json << 'EOF'
{
  "name": "PostgreSQL Ultravox",
  "type": "postgres",
  "data": {
    "host": "postgres",
    "port": 5432,
    "database": "ultravox_db",
    "user": "ultravox_user",
    "password": "ultravox_password_123"
  }
}
EOF

    echo "‚úÖ Templates de credentials cr√©√©s"
    echo "‚ö†Ô∏è N'oubliez pas de remplir vos vraies cl√©s API"
}

# Recommandations de d√©pannage
show_recommendations() {
    echo ""
    echo "üìã RECOMMANDATIONS DE D√âPANNAGE"
    echo "================================="
    echo ""
    echo "1. üÜï WORKFLOW MINIMAL"
    echo "   ‚Üí Essayez d'abord: workflow-simple-test.json"
    echo "   ‚Üí Puis tentez: workflow-ultravox-fixed.json"
    echo ""
    echo "2. üîë CREDENTIALS"
    echo "   ‚Üí Cr√©ez d'abord tous les credentials dans n8n"
    echo "   ‚Üí Utilisez les templates dans credential-*.json"
    echo ""
    echo "3. üåê IMPORT MANUEL"
    echo "   ‚Üí Interface n8n: http://localhost:5678"
    echo "   ‚Üí Workflows ‚Üí Import ‚Üí S√©lectionner fichier"
    echo ""
    echo "4. üîß IMPORT VIA API"
    echo "   curl -X POST http://localhost:5678/rest/workflows \\"
    echo "        -H 'Content-Type: application/json' \\"
    echo "        -d @workflow-simple-test.json"
    echo ""
    echo "5. üìù CR√âATION MANUELLE"
    echo "   ‚Üí Cr√©er nouveau workflow vide"
    echo "   ‚Üí Ajouter n≈ìud par n≈ìud:"
    echo "     - Webhook (path: ultravox-webhook)"
    echo "     - HTTP Request (GET https://api.ultravox.ai/api/calls)"
    echo "     - Code (analyse simple)"
    echo "     - Respond to Webhook"
    echo ""
    echo "6. üîç DIAGNOSTICS"
    echo "   ‚Üí Logs: docker-compose logs n8n"
    echo "   ‚Üí Debug: export N8N_LOG_LEVEL=debug"
    echo ""
}

# Test de connectivit√©
test_connectivity() {
    echo "üåê Test de connectivit√©..."
    
    # Tester n8n
    if curl -s http://localhost:5678 > /dev/null; then
        echo "‚úÖ n8n accessible sur port 5678"
    else
        echo "‚ùå n8n non accessible"
        echo "   ‚Üí V√©rifiez: docker-compose ps"
        echo "   ‚Üí Red√©marrez: docker-compose restart n8n"
    fi
    
    # Tester PostgreSQL
    if docker exec postgres-ultravox pg_isready -U ultravox_user > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL accessible"
    else
        echo "‚ùå PostgreSQL non accessible"
        echo "   ‚Üí V√©rifiez: docker-compose ps"
    fi
    
    # Tester API Ultravox
    if curl -s https://api.ultravox.ai > /dev/null; then
        echo "‚úÖ API Ultravox accessible"
    else
        echo "‚ùå API Ultravox non accessible"
        echo "   ‚Üí V√©rifiez votre connexion internet"
    fi
}

# Menu principal
main_menu() {
    echo ""
    echo "üîß MENU DE D√âPANNAGE"
    echo "===================="
    echo "1. V√©rifier la version n8n"
    echo "2. Cr√©er workflow de test minimal"
    echo "3. Nettoyer les fichiers JSON"
    echo "4. Valider la structure JSON"
    echo "5. Tester l'import via API"
    echo "6. Cr√©er les credentials de base"
    echo "7. Test de connectivit√©"
    echo "8. Afficher les recommandations"
    echo "9. Tout ex√©cuter (recommand√©)"
    echo "0. Quitter"
    echo ""
    read -p "Choisissez une option (0-9): " choice
    
    case $choice in
        1) check_n8n_version ;;
        2) create_test_workflow ;;
        3) clean_json_files ;;
        4) validate_json ;;
        5) test_import_api ;;
        6) create_credentials ;;
        7) test_connectivity ;;
        8) show_recommendations ;;
        9) 
            echo "üöÄ Ex√©cution compl√®te..."
            check_n8n_version
            create_test_workflow
            clean_json_files
            validate_json
            create_credentials
            test_connectivity
            test_import_api
            show_recommendations
            ;;
        0) echo "üëã Au revoir!"; exit 0 ;;
        *) echo "‚ùå Option invalide"; main_menu ;;
    esac
    
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    main_menu
}

# Point d'entr√©e
echo "üîß Script de d√©pannage pour workflow Ultravox n8n"
echo "Ce script va diagnostiquer et r√©soudre les probl√®mes d'import"
echo ""

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ö†Ô∏è Fichier docker-compose.yml non trouv√©"
    echo "   Assurez-vous d'√™tre dans le r√©pertoire du projet"
    echo "   Ou ex√©cutez: cd ~/ultravox-workflow"
    exit 1
fi

# Lancer le menu
main_menu