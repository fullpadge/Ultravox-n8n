#!/bin/bash

# Script d'installation pour le workflow Ultravox n8n
# Auteur: Assistant Scout
# Date: 18 janvier 2025
# Version: 1.0

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKFLOW_NAME="ultravox-workflow"
DB_NAME="ultravox_db"
DB_USER="ultravox_user"

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_command() {
    if ! command -v "$1" &> /dev/null; then
        log_error "La commande '$1' n'est pas installée."
        return 1
    fi
    return 0
}

# Banner d'installation
echo -e "${BLUE}"
echo "╔════════════════════════════════════════════════════════════╗"
echo "║           Installation Workflow Ultravox n8n              ║"
echo "║                      Version 1.0                          ║"
echo "╚════════════════════════════════════════════════════════════╝"
echo -e "${NC}"

# Vérification des prérequis
log_info "Vérification des prérequis..."

# Vérifier si Docker est installé
if check_command "docker"; then
    log_success "Docker est installé"
else
    log_error "Docker est requis. Veuillez l'installer d'abord."
    exit 1
fi

# Vérifier si Docker Compose est installé
if check_command "docker-compose"; then
    log_success "Docker Compose est installé"
else
    log_error "Docker Compose est requis. Veuillez l'installer d'abord."
    exit 1
fi

# Vérifier si curl est installé
if check_command "curl"; then
    log_success "curl est installé"
else
    log_error "curl est requis. Veuillez l'installer d'abord."
    exit 1
fi

# Créer le répertoire de travail
log_info "Création du répertoire de travail..."
WORK_DIR="$HOME/${WORKFLOW_NAME}"
mkdir -p "$WORK_DIR"
cd "$WORK_DIR"

# Copier les fichiers du workflow
log_info "Copie des fichiers du workflow..."
cp "$SCRIPT_DIR/workflow-ultravox-n8n.json" "$WORK_DIR/"
cp "$SCRIPT_DIR/instructions-workflow-ultravox.md" "$WORK_DIR/"
cp "$SCRIPT_DIR/config-exemple.env" "$WORK_DIR/.env.example"

# Créer le fichier docker-compose.yml
log_info "Création du fichier docker-compose.yml..."
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-ultravox
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=changeme123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Europe/Paris
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/opt/workflows
    depends_on:
      - postgres
    networks:
      - ultravox-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres-ultravox
    restart: always
    environment:
      - POSTGRES_DB=ultravox_db
      - POSTGRES_USER=ultravox_user
      - POSTGRES_PASSWORD=ultravox_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ultravox-network

  redis:
    image: redis:7-alpine
    container_name: redis-ultravox
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - ultravox-network

volumes:
  n8n_data:
  postgres_data:
  redis_data:

networks:
  ultravox-network:
    driver: bridge
EOF

# Créer le script d'initialisation de la base de données
log_info "Création du script d'initialisation PostgreSQL..."
cat > init.sql << 'EOF'
-- Création de la table pour les statistiques Ultravox
CREATE TABLE IF NOT EXISTS ultravox_stats (
    id SERIAL PRIMARY KEY,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_calls INTEGER NOT NULL DEFAULT 0,
    total_duration VARCHAR(50) NOT NULL DEFAULT '0s',
    joined_calls INTEGER NOT NULL DEFAULT 0,
    daily_data JSONB,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index pour optimiser les requêtes
CREATE INDEX IF NOT EXISTS idx_ultravox_stats_timestamp ON ultravox_stats(timestamp);
CREATE INDEX IF NOT EXISTS idx_ultravox_stats_date ON ultravox_stats(DATE(timestamp));
CREATE INDEX IF NOT EXISTS idx_ultravox_stats_daily_data ON ultravox_stats USING GIN(daily_data);

-- Création de la table pour les transcripts
CREATE TABLE IF NOT EXISTS ultravox_transcripts (
    id SERIAL PRIMARY KEY,
    call_id VARCHAR(255) UNIQUE NOT NULL,
    messages JSONB NOT NULL,
    rdv_detected BOOLEAN DEFAULT FALSE,
    rdv_details JSONB,
    processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index pour les transcripts
CREATE INDEX IF NOT EXISTS idx_ultravox_transcripts_call_id ON ultravox_transcripts(call_id);
CREATE INDEX IF NOT EXISTS idx_ultravox_transcripts_rdv ON ultravox_transcripts(rdv_detected);
CREATE INDEX IF NOT EXISTS idx_ultravox_transcripts_processed ON ultravox_transcripts(processed_at);

-- Création de la table pour les rendez-vous confirmés
CREATE TABLE IF NOT EXISTS confirmed_appointments (
    id SERIAL PRIMARY KEY,
    call_id VARCHAR(255) NOT NULL,
    title VARCHAR(500) NOT NULL,
    description TEXT,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    location VARCHAR(500),
    participant_email VARCHAR(255),
    participant_phone VARCHAR(50),
    calendar_event_id VARCHAR(255),
    confirmation_sent BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index pour les rendez-vous
CREATE INDEX IF NOT EXISTS idx_confirmed_appointments_call_id ON confirmed_appointments(call_id);
CREATE INDEX IF NOT EXISTS idx_confirmed_appointments_start_date ON confirmed_appointments(start_date);
CREATE INDEX IF NOT EXISTS idx_confirmed_appointments_participant ON confirmed_appointments(participant_email, participant_phone);

-- Création d'une vue pour les statistiques quotidiennes
CREATE OR REPLACE VIEW daily_stats AS
SELECT 
    DATE(timestamp) as date,
    SUM(total_calls) as total_calls,
    SUM(joined_calls) as joined_calls,
    AVG(total_calls) as avg_calls_per_execution,
    COUNT(*) as executions_count
FROM ultravox_stats 
GROUP BY DATE(timestamp)
ORDER BY date DESC;

-- Création d'une vue pour les tendances RDV
CREATE OR REPLACE VIEW rdv_trends AS
SELECT 
    DATE(processed_at) as date,
    COUNT(*) as total_calls_processed,
    SUM(CASE WHEN rdv_detected THEN 1 ELSE 0 END) as rdv_detected_count,
    ROUND(
        (SUM(CASE WHEN rdv_detected THEN 1 ELSE 0 END)::DECIMAL / COUNT(*)) * 100, 
        2
    ) as rdv_detection_rate
FROM ultravox_transcripts
GROUP BY DATE(processed_at)
ORDER BY date DESC;

-- Fonction pour nettoyer les anciennes données
CREATE OR REPLACE FUNCTION cleanup_old_data()
RETURNS VOID AS $$
BEGIN
    -- Supprimer les statistiques de plus de 1 an
    DELETE FROM ultravox_stats 
    WHERE timestamp < NOW() - INTERVAL '1 year';
    
    -- Archiver les transcripts de plus de 90 jours
    UPDATE ultravox_transcripts 
    SET messages = '{"archived": true}'
    WHERE processed_at < NOW() - INTERVAL '90 days'
    AND messages != '{"archived": true}';
    
    RAISE NOTICE 'Nettoyage des anciennes données terminé';
END;
$$ LANGUAGE plpgsql;

-- Données d'exemple pour les tests
INSERT INTO ultravox_stats (total_calls, total_duration, joined_calls, daily_data) 
VALUES 
    (10, '600s', 9, '{"test": true}'),
    (15, '900s', 14, '{"test": true}')
ON CONFLICT DO NOTHING;

COMMIT;
EOF

# Créer le répertoire pour les workflows
mkdir -p workflows

# Créer le fichier de configuration n8n
log_info "Création du fichier de configuration..."
cat > .env << 'EOF'
# Configuration générée automatiquement
N8N_BASIC_AUTH_ACTIVE=true
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=changeme123
N8N_HOST=localhost
N8N_PORT=5678
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=ultravox_db
POSTGRES_USER=ultravox_user
POSTGRES_PASSWORD=ultravox_password_123
EOF

# Fonction pour demander les credentials
ask_credentials() {
    log_info "Configuration des credentials..."
    
    echo
    read -p "Clé API Ultravox (optionnel pour l'instant): " ULTRAVOX_API_KEY
    read -p "Email administrateur: " ADMIN_EMAIL
    read -p "Numéro de téléphone administrateur: " ADMIN_PHONE
    
    # Ajouter les credentials au fichier .env
    echo "" >> .env
    echo "# Credentials utilisateur" >> .env
    echo "ULTRAVOX_API_KEY=${ULTRAVOX_API_KEY}" >> .env
    echo "ADMIN_EMAIL=${ADMIN_EMAIL}" >> .env
    echo "ADMIN_PHONE=${ADMIN_PHONE}" >> .env
}

# Créer le script de démarrage
log_info "Création du script de démarrage..."
cat > start.sh << 'EOF'
#!/bin/bash

echo "Démarrage des services Ultravox n8n..."

# Démarrer les conteneurs
docker-compose up -d

echo "Attente du démarrage des services..."
sleep 10

# Vérifier que les services sont en cours d'exécution
if docker-compose ps | grep -q "Up"; then
    echo "✅ Services démarrés avec succès!"
    echo ""
    echo "🌐 Interface n8n: http://localhost:5678"
    echo "👤 Utilisateur: admin"
    echo "🔑 Mot de passe: changeme123"
    echo ""
    echo "🗄️  Base de données PostgreSQL: localhost:5432"
    echo "📊 Base de données: ultravox_db"
    echo ""
    echo "📖 Documentation: ./instructions-workflow-ultravox.md"
else
    echo "❌ Erreur lors du démarrage des services"
    docker-compose logs
fi
EOF

chmod +x start.sh

# Créer le script d'arrêt
cat > stop.sh << 'EOF'
#!/bin/bash

echo "Arrêt des services Ultravox n8n..."
docker-compose down

echo "✅ Services arrêtés"
EOF

chmod +x stop.sh

# Créer le script de sauvegarde
cat > backup.sh << 'EOF'
#!/bin/bash

BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "Création de la sauvegarde dans $BACKUP_DIR..."

# Sauvegarde des données n8n
docker exec n8n-ultravox tar czf - /home/node/.n8n > "$BACKUP_DIR/n8n_data.tar.gz"

# Sauvegarde de la base de données
docker exec postgres-ultravox pg_dump -U ultravox_user ultravox_db > "$BACKUP_DIR/database.sql"

# Sauvegarde des fichiers de configuration
cp .env "$BACKUP_DIR/"
cp docker-compose.yml "$BACKUP_DIR/"
cp workflow-ultravox-n8n.json "$BACKUP_DIR/"

echo "✅ Sauvegarde créée: $BACKUP_DIR"
EOF

chmod +x backup.sh

# Créer le script de mise à jour
cat > update.sh << 'EOF'
#!/bin/bash

echo "Mise à jour du workflow Ultravox n8n..."

# Sauvegarder avant mise à jour
./backup.sh

# Mettre à jour les images Docker
docker-compose pull

# Redémarrer les services
docker-compose down
docker-compose up -d

echo "✅ Mise à jour terminée"
EOF

chmod +x update.sh

# Menu interactif pour la configuration
echo
log_info "Configuration des credentials (recommandé)..."
echo "1. Configurer maintenant"
echo "2. Configurer plus tard"
read -p "Choisissez une option (1-2): " CONFIG_CHOICE

if [ "$CONFIG_CHOICE" = "1" ]; then
    ask_credentials
else
    log_warning "N'oubliez pas de configurer vos credentials dans le fichier .env"
fi

# Installation terminée
echo
log_success "Installation terminée avec succès!"
echo
echo "📁 Répertoire d'installation: $WORK_DIR"
echo "🚀 Pour démarrer: ./start.sh"
echo "🛑 Pour arrêter: ./stop.sh"
echo "💾 Pour sauvegarder: ./backup.sh"
echo "🔄 Pour mettre à jour: ./update.sh"
echo
echo "📖 Consultez le fichier 'instructions-workflow-ultravox.md' pour plus de détails."
echo

# Proposer de démarrer immédiatement
echo
read -p "Voulez-vous démarrer les services maintenant? (y/N): " START_NOW

if [[ "$START_NOW" =~ ^[Yy]$ ]]; then
    log_info "Démarrage des services..."
    ./start.sh
else
    log_info "Vous pouvez démarrer les services plus tard avec: ./start.sh"
fi

echo
log_success "Installation du workflow Ultravox n8n terminée!"
echo -e "${BLUE}Merci d'avoir utilisé le script d'installation automatique.${NC}"